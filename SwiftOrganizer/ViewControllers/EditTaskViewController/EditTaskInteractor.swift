//
//  EditTaskInteractor.swift
//  SwiftOrganizer
//
//  Created by Sergey Krotkih on 6/18/16.
//  Copyright (c) 2016 Sergey Krotkih. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol EditTaskInteractorInput
{
    func addNewTask()
    func fetchTask()
    func wasDataChanged() -> Bool
    func saveTask()
    var taskID: AnyObject? {get set}
    var responce: EditTask.FetchTask.Response! {get}
}

protocol EditTaskInteractorOutput
{
    func displayTask()
    var title: String? {get set}
}

class EditTaskInteractor: EditTaskInteractorInput
{
    var output: EditTaskInteractorOutput!
    var taskID: AnyObject?
    var originalTask: Task!
    var responce: EditTask.FetchTask.Response!
    
    func addNewTask(){
        self.taskID = nil
    }
    
    func fetchTask()
    {
        if let taskID = self.taskID {
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), {
                let task: Task = SODataBaseFactory.sharedInstance.dataBase.taskForObjectID(taskID)!
                self.responce = EditTask.FetchTask.Response(task: task)
                self.originalTask = Task()
                self.originalTask.cloneTask(task)
                self.output.displayTask()
                self.output.title = "Edit Task".localized
            })
        } else {
            let task = Task()
            task.clearTask()
            self.responce = EditTask.FetchTask.Response(task: task)
            self.originalTask = nil
            self.output.displayTask()
            self.output.title = "New Task".localized
        }
    }
    
    func wasDataChanged() -> Bool{
        return !self.originalTask.isEqual(self.responce.task)
    }
    
    // This method builds an object, which properties were changed before in separated views
    // Builder is presented by just one class
    func saveTask(){
        self.responce.task.save{(error: NSError?) in
            if let saveError = error{
                showAlertWithTitle("Failed updating task. Please repeat later.".localized, message: saveError.description)
            } else{
                self.originalTask.cloneTask(self.responce.task)
            }
        }
    }
    
}

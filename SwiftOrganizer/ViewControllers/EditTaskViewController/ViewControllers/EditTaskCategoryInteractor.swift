//
//  EditTaskCategoryInteractor.swift
//  SwiftOrganizer
//
//  Created by Sergey Krotkih on 6/20/16.
//  Copyright (c) 2016 Sergey Krotkih. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol EditTaskCategoryInteractorInput
{
    func fetchData()
    func saveData()
    func dataWasChanged() -> Bool
    func selectDataWithIndex(index: Int)
}

protocol EditTaskCategoryInteractorOutput
{
    func presentResponce(response: EditTaskCategoryResponse)
    func presentTaskCategory(taskCategoryId: String)
    func generateViewModel()
}

class EditTaskCategoryInteractor: EditTaskCategoryInteractorInput
{
    var output: EditTaskCategoryInteractorOutput!
    var input: EditTask.FetchTask.Response!
    private var categories: [TaskCategory] = [TaskCategory]()
    var taskCategoryId: String = ""
    
    func fetchData(){
        SOFetchingData.sharedInstance.allCategories{(categories: [TaskCategory], fetchError: NSError?) in
            if let error = fetchError{
                self.categories = []
                print("Failed to fetch categories data with error: \(error.localizedDescription)")
            } else {
                self.categories = categories.filter {(category: TaskCategory) in category.visible }
            }
            let responce = EditTaskCategoryResponse(categories: self.categories)
            self.output.presentResponce(responce)
            self.fetchTaskCategory()
            self.output.presentTaskCategory(self.taskCategoryId)
            self.output.generateViewModel()
        }
    }
    
    func fetchTaskCategory(){
        self.taskCategoryId = self.input.task.category
    }
    
    func dataWasChanged() -> Bool{
        let dataWasChanged = self.input.task.category == self.taskCategoryId
        return dataWasChanged
    }
    
    func selectDataWithIndex(index: Int) {
        self.taskCategoryId = self.categories[index].recordid
        self.output.presentTaskCategory(self.taskCategoryId)
        self.output.generateViewModel()
    }
    
    func saveData() {
        self.input.task.category = self.taskCategoryId
    }
}

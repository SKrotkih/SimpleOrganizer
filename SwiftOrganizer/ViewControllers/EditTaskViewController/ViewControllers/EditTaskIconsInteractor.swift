//
//  EditTaskIconsInteractor.swift
//  SwiftOrganizer
//
//  Created by Sergey Krotkih on 6/20/16.
//  Copyright (c) 2016 Sergey Krotkih. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol EditTaskIconsInteractorInput
{
    func fetchData()
    func addIconWithIndex(index: Int)
    func saveData()
    func dataWasChanged() -> Bool
    func fetchTaskIcons()    
}

protocol EditTaskIconsInteractorOutput
{
    func presentResponce(response: EditTaskIconsResponse)
    func presentTaskIcons(taskIcons: TaskIcons)
    func generateViewModel()
}

class EditTaskIconsInteractor: EditTaskIconsInteractorInput
{
    var output: EditTaskIconsInteractorOutput!
    var input: EditTask.FetchTask.Response!
    var icons = [TaskIco]()
    var taskIcons = [String]()
    
    func fetchData(){
        SOFetchingData.sharedInstance.allIcons{(icons: [TaskIco], fetchError: NSError?) in
            if let error = fetchError{
                self.icons = []
                print("Failed to fetch all Icons data with error: \(error.localizedDescription)")
            } else {
                self.icons = icons.filter {(ico: TaskIco) in ico.visible }
            }
            let responce = EditTaskIconsResponse(icons: self.icons)
            self.output.presentResponce(responce)
            self.fetchTaskIcons()
            self.output.generateViewModel()
        }
    }

    func fetchTaskIcons(){
        self.taskIcons = self.input.task.icons
        let taskIcons = TaskIcons(icons: self.taskIcons)
        self.output.presentTaskIcons(taskIcons)
        
        //let dict = NSDictionary(objects: [self.taskIcons], forKeys: ["icons"])
        //self.undoDelegate?.addToUndoBuffer(dict)
    }
    
    func dataWasChanged() -> Bool{
        var dataWasChanged: Bool = false
        let icons = self.input.task.icons
        dataWasChanged = icons.count != self.taskIcons.count
        if !dataWasChanged {
            for i in 0..<icons.count{
                let icoId: String = icons[i]
                if icoId.characters.count > 0{
                    if self.taskIcons.filter({
                        return $0 == icoId
                    }).count == 0{
                        dataWasChanged = true
                        break
                    }
                }
            }
        }
        return dataWasChanged
    }
    
    func addIconWithIndex(index: Int) {
        let ico: TaskIco = self.icons[index]
        let icoId: String = ico.recordid
        if let index = self.taskIcons.indexOf(icoId) {
            self.taskIcons.removeAtIndex(index)
        } else {
            self.taskIcons.append(icoId)
        }
        let taskIcons = TaskIcons(icons: self.taskIcons)
        self.output.presentTaskIcons(taskIcons)
        self.output.generateViewModel()
    }
    
    func saveData() {
        self.input.task.icons = self.taskIcons
    }
}

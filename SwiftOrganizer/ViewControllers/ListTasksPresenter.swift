//
//  ListTasksPresenter.swift
//  SwiftOrganizer
//
//  Created by Sergey Krotkih on 6/17/16.
//  Copyright (c) 2016 Sergey Krotkih. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListTasksPresenterInput
{
    func presentFetchedTasks(response: ListTasks.FetchTasks.Response)
}

protocol ListTasksPresenterOutput: class
{
    func displayFetchedTasks(viewModel: ListTasks.FetchTasks.ViewModel)
}

class ListTasksPresenter: ListTasksPresenterInput
{
    weak var output: ListTasksPresenterOutput!
    
    func presentFetchedTasks(response: ListTasks.FetchTasks.Response){

        var displayedTasks: [ListTasks.FetchTasks.ViewModel.DisplayedTask] = []
        for task in response.tasks {
            var icons: [UIImage] = []
            for index in 0..<task.icons.count{
                if let iconImage: UIImage = task.iconImage(index){
                    icons.append(iconImage)
                }
            }
            var date: String = ""
            if let dateEvent = task.date{
                let dateFormatter = NSDateFormatter()
                dateFormatter.dateFormat = "dd-MM-yyyy HH:mm:ss"
                date = dateFormatter.stringFromDate(dateEvent)
            }
            let displayedTask = ListTasks.FetchTasks.ViewModel.DisplayedTask(objectID: task.databaseObject, title: task.title, date: date, categoryName: task.categoryName, icons: icons)
            
            displayedTasks.append(displayedTask)
        }
        let viewModel = ListTasks.FetchTasks.ViewModel(displayedTasks: displayedTasks)
        output.displayFetchedTasks(viewModel)
    }
}
